A compiled programming language translates the entire source code into machine code or executable code before execution. The resulting executable file can run independently without the need for the original source code or a separate interpreter. Examples of compiled languages include C, C++, and Rust. An interpreted programming language, on the other hand, translates source code into an intermediate representation or bytecode, which is then executed by an interpreter during runtime. Interpreted languages do not produce standalone executables but rely on the interpreter to execute code. Examples of interpreted languages include Python, JavaScript, and Ruby.